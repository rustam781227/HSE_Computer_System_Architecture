     1                                  global  RECTANGLE
     2                                  global  TRIANGLE
     3                                  global  CIRCLE
     4                                  
     5                                  global  red
     6                                  global  orange
     7                                  global  yellow
     8                                  global  green
     9                                  global  light_blue
    10                                  global  blue
    11                                  global  purple
    12                                  global  redstr
    13                                  global  orangestr
    14                                  global  yellowstr
    15                                  global  greenstr
    16                                  global  light_bluestr
    17                                  global  bluestr
    18                                  global  purplestr
    19                                  
    20                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> 
    15                              <1> extern  InContainer
    16                              <1> extern  InRndContainer
    17                              <1> extern  OutContainer
    18                              <1> extern  SSumContainer
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> ; Вывод строки символов из буфера
    22                              <1> %macro	PrintStrBuf 2
    23                              <1>         mov rdi, %2
    24                              <1>         mov rsi, %1
    25                              <1>         xor rax, rax
    26                              <1>         call fprintf
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> ;-------------------------------------------------------------
    30                              <1> ; Вывод строки, передаваемой непосредственно макросу
    31                              <1> %macro  PrintStr    2
    32                              <1>     section .data
    33                              <1>         %%arg1  db  %1,0        ; first argument
    34                              <1>     section .text               ; the printf arguments
    35                              <1>         mov rdi, %2
    36                              <1>         mov rsi, %%arg1
    37                              <1>         mov rax, 0              ; no floating point
    38                              <1>         call fprintf
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> ;-------------------------------------------------------------
    42                              <1> ; Вывод строки, передаваемой непосредственно макросу
    43                              <1> ; с переводом на следующую строку
    44                              <1> %macro  PrintStrLn    2
    45                              <1>     section .data
    46                              <1>         %%arg1  db  %1,10,0     ; first argument
    47                              <1>     section .text               ; the printf arguments
    48                              <1>         mov rdi, %2
    49                              <1>         mov rsi, %%arg1
    50                              <1>         mov rax, 0              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;-------------------------------------------------------------
    55                              <1> ; Вывод целого числа
    56                              <1> %macro  PrintInt    2
    57                              <1>     section .data
    58                              <1>         %%arg1  db  "%d",0     ; first argument
    59                              <1>     section .text               ; the printf arguments
    60                              <1>         mov rdi, %2
    61                              <1>         mov rsi, %%arg1
    62                              <1>         mov rdx, %1
    63                              <1>         mov rax, 0              ; no floating point
    64                              <1>         call fprintf
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;-------------------------------------------------------------
    68                              <1> ; Вывод 64-разрядного беззнакового целого числа
    69                              <1> %macro  PrintLLUns    2
    70                              <1>     section .data
    71                              <1>         %%arg1  db  "%llu",0     ; first argument
    72                              <1>     section .text               ; the printf arguments
    73                              <1>         mov rdi, %2
    74                              <1>         mov rsi, %%arg1
    75                              <1>         mov rdx, %1
    76                              <1>         mov rax, 0              ; no floating point
    77                              <1>         call fprintf
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> ;-------------------------------------------------------------
    81                              <1> ; Вывод действительного числа двойной точности
    82                              <1> %macro  PrintDouble    2
    83                              <1>     section .data
    84                              <1>         %%arg1  db  "%lg",0     ; first argument
    85                              <1>     section .text               ; the printf arguments
    86                              <1>         mov rdi, %2
    87                              <1>         mov rsi, %%arg1
    88                              <1>         movsd xmm0, %1
    89                              <1>         mov rax, 1              ; no floating point
    90                              <1>         call fprintf
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> ;-------------------------------------------------------------
    94                              <1> ; Вывод содержимого контейнера
    95                              <1> %macro  PrintContainer    3
    96                              <1>     mov     rdi, %1
    97                              <1>     mov     esi, %2
    98                              <1>     mov     rdx, %3
    99                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   100                              <1>     call    OutContainer
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;-------------------------------------------------------------
   104                              <1> ; Вычисление суммы периметров фигур в контейнере
   105                              <1> %macro  ContainerSum    3
   106                              <1>     mov     rdi, %1
   107                              <1>     mov     rsi, %2
   108                              <1>     call    SSumContainer
   109                              <1>     movsd   %3, xmm0
   110                              <1> %endmacro
   111                              <1> 
   112                              <1> ;-------------------------------------------------------------
   113                              <1> ; Открытие файла для чтения, записи
   114                              <1> %macro  FileOpen   3
   115                              <1>     section .data
   116                              <1>         %%rw  db  %2,0          ; признак доступа
   117                              <1>     section .text               ; the printf arguments
   118                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   119                              <1>         mov     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   120                              <1>         ; Или аналог:
   121                              <1>         ;lea     rsi, [%%rw]    ; строка определяющая чтение-запись. Задается явно
   122                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   123                              <1>         call    fopen
   124                              <1>         mov     [%3], rax
   125                              <1> %endmacro
   126                              <1> 
   127                              <1> ;-------------------------------------------------------------
   128                              <1> ; Закрытие открытого файла
   129                              <1> %macro  FileClose   1
   130                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   131                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   132                              <1>     call    fclose
   133                              <1> %endmacro
   134                              <1> 
    21                                  
    22                                  section .data
    23 00000000 01000000                    red            dd     1
    24 00000004 02000000                    orange         dd     2
    25 00000008 03000000                    yellow         dd     3
    26 0000000C 04000000                    green          dd     4
    27 00000010 05000000                    light_blue     dd     5
    28 00000014 06000000                    blue           dd     6
    29 00000018 07000000                    purple         dd     7
    30 0000001C 72656400                    redstr         db     "red",0
    31 00000020 6F72616E676500              orangestr      db     "orange",0
    32 00000027 79656C6C6F7700              yellowstr      db     "yellow",0
    33 0000002E 677265656E00                greenstr       db     "green",0
    34 00000034 6C6967687420626C75-         light_bluestr  db     "light blue",0
    34 0000003D 6500               
    35 0000003F 626C756500                  bluestr        db     "blue",0
    36 00000044 707572706C6500              purplestr      db     "purple",0 
    37                                  
    38 0000004B 01000000                    RECTANGLE      dd     1 
    39 0000004F 02000000                    TRIANGLE       dd     2
    40 00000053 03000000                    CIRCLE         dd     3
    41 00000057 000000000000F03F            oneDouble      dq     1.0
    42 0000005F 496E636F7272656374-         erMsg1         db     "Incorrect number of arguments = %d: ",10,0
    42 00000068 206E756D626572206F-
    42 00000071 6620617267756D656E-
    42 0000007A 7473203D2025643A20-
    42 00000083 0A00               
    43 00000085 2D6E00                      rndGen         db     "-n",0
    44 00000088 2D6600                      fileGen        db     "-f",0
    45 0000008B 696E636F7272656374-         errMessage1    db     "incorrect command line!", 10,"  Waited:",10
    45 00000094 20636F6D6D616E6420-
    45 0000009D 6C696E65210A202057-
    45 000000A6 61697465643A0A     
    46 000000AD 2020202020636F6D6D-                        db     "     command -f infile outfile",10,"  Or:",10
    46 000000B6 616E64202D6620696E-
    46 000000BF 66696C65206F757466-
    46 000000C8 696C650A20204F723A-
    46 000000D1 0A                 
    47 000000D2 2020202020636F6D6D-                        db     "     command -n number outfile",10,0
    47 000000DB 616E64202D6E206E75-
    47 000000E4 6D626572206F757466-
    47 000000ED 696C650A00         
    48 000000F2 696E636F7272656374-         errMessage2    db     "incorrect qualifier value!", 10,"  Waited:",10
    48 000000FB 207175616C69666965-
    48 00000104 722076616C7565210A-
    48 0000010D 20205761697465643A-
    48 00000116 0A                 
    49 00000117 2020202020636F6D6D-                        db     "     command -f infile outfile",10,"  Or:",10
    49 00000120 616E64202D6620696E-
    49 00000129 66696C65206F757466-
    49 00000132 696C650A20204F723A-
    49 0000013B 0A                 
    50 0000013C 2020202020636F6D6D-                        db     "     command -n number outfile",10,0
    50 00000145 616E64202D6E206E75-
    50 0000014E 6D626572206F757466-
    50 00000157 696C650A00         
    51 0000015C 00000000                    len            dd     0       ; Количество элементов в массиве
    52                                  section .bss
    53 00000000 <res 00000004>              argc           resd   1
    54 00000004 <res 00000004>              num            resd   1
    55 00000008 <res 00000008>              sum            resq   1
    56 00000010 <res 00000008>              start          resq   1       ; начало отсчета времени
    57 00000018 <res 00000008>              delta          resq   1       ; интервал отсчета времени
    58 00000020 <res 00000010>              startTime      resq   2       ; начало отсчета времени
    59 00000030 <res 00000010>              endTime        resq   2       ; конец отсчета времени
    60 00000040 <res 00000010>              deltaTime      resq   2       ; интервал отсчета времени
    61 00000050 <res 00000008>              ifst           resq   1       ; указатель на файл, открываемый файл для чтения фигур
    62 00000058 <res 00000008>              ofst1          resq   1       ; указатель на файл, открываемый файл для записи контейнера
    63 00000060 <res 00000008>              ofst2          resq   1       ; указатель на файл, открываемый файл для записи периметра
    64 00000068 <res 0004E200>              cont           resb   320000  ; Массив используемый для хранения данных
    65                                  section .text 
    66                                      global main
    67                                  main:
    68 00000000 55                      push rbp
    69 00000001 4889E5                  mov rbp,rsp
    70                                      
    71 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    72 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    73 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    74                                  
    75 00000011 4983FC04                    cmp r12, 4      ; проверка количества аргументов
    76 00000015 741F                        je .next1
    77                                      PrintStrBuf errMessage1, [stdout]
    77 00000017 488B3C25[00000000]  <1>  mov rdi, %2
    77 0000001F 48BE-               <1>  mov rsi, %1
    77 00000021 [8B00000000000000]  <1>
    77 00000029 4831C0              <1>  xor rax, rax
    77 0000002C E8(00000000)        <1>  call fprintf
    78 00000031 E973030000                  jmp .return
    79                                      
    80                                  .next1:
    81                                      PrintStrLn "Start", [stdout]
    81                              <1>  section .data
    81 00000160 53746172740A00      <1>  %%arg1 db %1,10,0
    81                              <1>  section .text
    81 00000036 488B3C25[00000000]  <1>  mov rdi, %2
    81 0000003E 48BE-               <1>  mov rsi, %%arg1
    81 00000040 [6001000000000000]  <1>
    81 00000048 B800000000          <1>  mov rax, 0
    81 0000004D E8(00000000)        <1>  call fprintf
    82                                      ; Проверка второго аргумента
    83 00000052 48BF-                       mov rdi, rndGen     ; признак для сравнения
    83 00000054 [8500000000000000] 
    84 0000005C 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    85 00000060 B903000000                  mov rcx, 3          ; сравнение, включая нуль (обе строки завершились)
    86 00000065 FC                          cld                 ; обнуление флага направления (инкремент)
    87 00000066 F3A6                        repe cmpsb
    88 00000068 743B                        je .next2
    89 0000006A 48BF-                       mov rdi, fileGen
    89 0000006C [8800000000000000] 
    90 00000074 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    91 00000078 B903000000                  mov rcx, 3          ; сравнение, включая нуль (обе строки завершились)
    92 0000007D FC                          cld                 ; обнуление флага направления (инкремент)
    93 0000007E F3A6                        repe cmpsb
    94 00000080 0F8482000000                je .next3
    95                                      PrintStrBuf errMessage2, [stdout]
    95 00000086 488B3C25[00000000]  <1>  mov rdi, %2
    95 0000008E 48BE-               <1>  mov rsi, %1
    95 00000090 [F200000000000000]  <1>
    95 00000098 4831C0              <1>  xor rax, rax
    95 0000009B E8(00000000)        <1>  call fprintf
    96 000000A0 E904030000                  jmp .return   
    97                                      
    98                                  .next2:
    99                                      ; Генерация случайных фигур
   100 000000A5 498B7D10                    mov rdi, [r13+16]
   101 000000A9 E8(00000000)                call atoi
   102 000000AE 890425[04000000]            mov [num], eax
   103 000000B5 8B0425[04000000]            mov eax, [num]
   104 000000BC 83F801                      cmp eax, 1
   105 000000BF 0F8C88020000                jl .fall1
   106 000000C5 3D10270000                  cmp eax, 10000
   107 000000CA 0F8F7D020000                jg .fall1
   108                                      ; Начальная установка генератора случайных чисел
   109 000000D0 4831FF                      xor     rdi, rdi
   110 000000D3 4831C0                      xor     rax, rax
   111 000000D6 E8(00000000)                call    time
   112 000000DB 4889C7                      mov     rdi, rax
   113 000000DE 4831C0                      xor     rax, rax
   114 000000E1 E8(00000000)                call    srand
   115                                      ; Заполнение контейнера случайными фигурами
   116 000000E6 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   116 000000E8 [6800000000000000] 
   117 000000F0 48BE-                       mov     rsi, len    ; передача адреса для длины
   117 000000F2 [5C01000000000000] 
   118 000000FA 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   119 00000101 E8(00000000)                call    InRndContainer
   120 00000106 EB56                        jmp .task2
   121                                  
   122                                  .next3:
   123                                      ; Получение фигур из файла
   124                                      FileOpen [r13+16], "r", ifst
   124                              <1>  section .data
   124 00000167 7200                <1>  %%rw db %2,0
   124                              <1>  section .text
   124 00000108 498B7D10            <1>  mov rdi, %1
   124 0000010C 48BE-               <1>  mov rsi, %%rw
   124 0000010E [6701000000000000]  <1>
   124                              <1> 
   124                              <1> 
   124 00000116 B800000000          <1>  mov rax, 0
   124 0000011B E8(00000000)        <1>  call fopen
   124 00000120 48890425[50000000]  <1>  mov [%3], rax
   125                                      ; Заполнение контейнера фигурами из файла
   126 00000128 48BF-                       mov     rdi, cont           ; адрес контейнера
   126 0000012A [6800000000000000] 
   127 00000132 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   127 00000134 [5C01000000000000] 
   128 0000013C 488B1425[50000000]          mov     rdx, [ifst]         ; указатель на файл
   129 00000144 4831C0                      xor     rax, rax
   130 00000147 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   131                                      FileClose [ifst]
   131 0000014C 488B3C25[50000000]  <1>  mov rdi, %1
   131 00000154 B800000000          <1>  mov rax, 0
   131 00000159 E8(00000000)        <1>  call fclose
   132                                  
   133                                  .task2:
   134                                      ; Вывод содержимого контейнера
   135                                      PrintStrLn "Filled container:", [stdout]
   135                              <1>  section .data
   135 00000169 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   135 00000172 6E7461696E65723A0A- <1>
   135 0000017B 00                  <1>
   135                              <1>  section .text
   135 0000015E 488B3C25[00000000]  <1>  mov rdi, %2
   135 00000166 48BE-               <1>  mov rsi, %%arg1
   135 00000168 [6901000000000000]  <1>
   135 00000170 B800000000          <1>  mov rax, 0
   135 00000175 E8(00000000)        <1>  call fprintf
   136                                      PrintContainer cont, [len], [stdout]
   136 0000017A 48BF-               <1>  mov rdi, %1
   136 0000017C [6800000000000000]  <1>
   136 00000184 8B3425[5C010000]    <1>  mov esi, %2
   136 0000018B 488B1425[00000000]  <1>  mov rdx, %3
   136 00000193 B800000000          <1>  mov rax, 0
   136 00000198 E8(00000000)        <1>  call OutContainer
   137                                      FileOpen [r13+24], "w", ofst1
   137                              <1>  section .data
   137 0000017C 7700                <1>  %%rw db %2,0
   137                              <1>  section .text
   137 0000019D 498B7D18            <1>  mov rdi, %1
   137 000001A1 48BE-               <1>  mov rsi, %%rw
   137 000001A3 [7C01000000000000]  <1>
   137                              <1> 
   137                              <1> 
   137 000001AB B800000000          <1>  mov rax, 0
   137 000001B0 E8(00000000)        <1>  call fopen
   137 000001B5 48890425[58000000]  <1>  mov [%3], rax
   138                                      PrintStrLn "Filled container:", [ofst1]
   138                              <1>  section .data
   138 0000017E 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   138 00000187 6E7461696E65723A0A- <1>
   138 00000190 00                  <1>
   138                              <1>  section .text
   138 000001BD 488B3C25[58000000]  <1>  mov rdi, %2
   138 000001C5 48BE-               <1>  mov rsi, %%arg1
   138 000001C7 [7E01000000000000]  <1>
   138 000001CF B800000000          <1>  mov rax, 0
   138 000001D4 E8(00000000)        <1>  call fprintf
   139                                      PrintContainer cont, [len], [ofst1]
   139 000001D9 48BF-               <1>  mov rdi, %1
   139 000001DB [6800000000000000]  <1>
   139 000001E3 8B3425[5C010000]    <1>  mov esi, %2
   139 000001EA 488B1425[58000000]  <1>  mov rdx, %3
   139 000001F2 B800000000          <1>  mov rax, 0
   139 000001F7 E8(00000000)        <1>  call OutContainer
   140                                      FileClose [ofst1]
   140 000001FC 488B3C25[58000000]  <1>  mov rdi, %1
   140 00000204 B800000000          <1>  mov rax, 0
   140 00000209 E8(00000000)        <1>  call fclose
   141                                      ; Вычисление времени старта
   142 0000020E B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   143 00000213 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   144 00000215 488D3425[20000000]          lea rsi, [startTime]
   145 0000021D 0F05                        syscall        ; [time] contains number of seconds
   146                                                     ; [time + 8] contains number of nanoseconds
   147                                                                
   148                                      
   149                                      ; Вычисление времени завершения
   150 0000021F B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   151 00000224 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   152 00000226 488D3425[30000000]          lea rsi, [endTime]
   153 0000022E 0F05                        syscall        ; [time] contains number of seconds
   154                                                     ; [time + 8] contains number of nanoseconds
   155                                  
   156                                      ; Получение времени работы
   157 00000230 488B0425[30000000]          mov rax, [endTime]
   158 00000238 482B0425[20000000]          sub rax, [startTime]
   159 00000240 488B1C25[38000000]          mov rbx, [endTime+8]
   160 00000248 488B0C25[28000000]          mov rcx, [startTime+8]
   161 00000250 4839CB                      cmp rbx, rcx
   162 00000253 7D0A                        jge .subNanoOnly
   163                                      ; иначе занимаем секунду
   164 00000255 48FFC8                      dec rax
   165 00000258 4881C300CA9A3B              add rbx, 1000000000
   166                                      
   167                                  .subNanoOnly:
   168 0000025F 482B1C25[28000000]          sub rbx, [startTime+8]
   169 00000267 48890425[40000000]          mov [deltaTime], rax
   170 0000026F 48891C25[48000000]          mov [deltaTime+8], rbx
   171                                  
   172                                      PrintStr "Calculaton time = ", [stdout]
   172                              <1>  section .data
   172 00000191 43616C63756C61746F- <1>  %%arg1 db %1,0
   172 0000019A 6E2074696D65203D20- <1>
   172 000001A3 00                  <1>
   172                              <1>  section .text
   172 00000277 488B3C25[00000000]  <1>  mov rdi, %2
   172 0000027F 48BE-               <1>  mov rsi, %%arg1
   172 00000281 [9101000000000000]  <1>
   172 00000289 B800000000          <1>  mov rax, 0
   172 0000028E E8(00000000)        <1>  call fprintf
   173                                      PrintLLUns [deltaTime], [stdout]
   173                              <1>  section .data
   173 000001A4 256C6C7500          <1>  %%arg1 db "%llu",0
   173                              <1>  section .text
   173 00000293 488B3C25[00000000]  <1>  mov rdi, %2
   173 0000029B 48BE-               <1>  mov rsi, %%arg1
   173 0000029D [A401000000000000]  <1>
   173 000002A5 488B1425[40000000]  <1>  mov rdx, %1
   173 000002AD B800000000          <1>  mov rax, 0
   173 000002B2 E8(00000000)        <1>  call fprintf
   174                                      PrintStr " sec, ", [stdout]
   174                              <1>  section .data
   174 000001A9 207365632C2000      <1>  %%arg1 db %1,0
   174                              <1>  section .text
   174 000002B7 488B3C25[00000000]  <1>  mov rdi, %2
   174 000002BF 48BE-               <1>  mov rsi, %%arg1
   174 000002C1 [A901000000000000]  <1>
   174 000002C9 B800000000          <1>  mov rax, 0
   174 000002CE E8(00000000)        <1>  call fprintf
   175                                      PrintLLUns [deltaTime+8], [stdout]
   175                              <1>  section .data
   175 000001B0 256C6C7500          <1>  %%arg1 db "%llu",0
   175                              <1>  section .text
   175 000002D3 488B3C25[00000000]  <1>  mov rdi, %2
   175 000002DB 48BE-               <1>  mov rsi, %%arg1
   175 000002DD [B001000000000000]  <1>
   175 000002E5 488B1425[48000000]  <1>  mov rdx, %1
   175 000002ED B800000000          <1>  mov rax, 0
   175 000002F2 E8(00000000)        <1>  call fprintf
   176                                      PrintStr " nsec", [stdout]
   176                              <1>  section .data
   176 000001B5 206E73656300        <1>  %%arg1 db %1,0
   176                              <1>  section .text
   176 000002F7 488B3C25[00000000]  <1>  mov rdi, %2
   176 000002FF 48BE-               <1>  mov rsi, %%arg1
   176 00000301 [B501000000000000]  <1>
   176 00000309 B800000000          <1>  mov rax, 0
   176 0000030E E8(00000000)        <1>  call fprintf
   177                                      PrintStr 10, [stdout]
   177                              <1>  section .data
   177 000001BB 0A00                <1>  %%arg1 db %1,0
   177                              <1>  section .text
   177 00000313 488B3C25[00000000]  <1>  mov rdi, %2
   177 0000031B 48BE-               <1>  mov rsi, %%arg1
   177 0000031D [BB01000000000000]  <1>
   177 00000325 B800000000          <1>  mov rax, 0
   177 0000032A E8(00000000)        <1>  call fprintf
   178                                  
   179                                      PrintStrLn "Stop", [stdout]
   179                              <1>  section .data
   179 000001BD 53746F700A00        <1>  %%arg1 db %1,10,0
   179                              <1>  section .text
   179 0000032F 488B3C25[00000000]  <1>  mov rdi, %2
   179 00000337 48BE-               <1>  mov rsi, %%arg1
   179 00000339 [BD01000000000000]  <1>
   179 00000341 B800000000          <1>  mov rax, 0
   179 00000346 E8(00000000)        <1>  call fprintf
   180 0000034B EB5C                        jmp .return
   181                                      
   182                                  .fall1:
   183                                      PrintStr "incorrect numer of figures = ", [stdout]
   183                              <1>  section .data
   183 000001C3 696E636F7272656374- <1>  %%arg1 db %1,0
   183 000001CC 206E756D6572206F66- <1>
   183 000001D5 206669677572657320- <1>
   183 000001DE 3D2000              <1>
   183                              <1>  section .text
   183 0000034D 488B3C25[00000000]  <1>  mov rdi, %2
   183 00000355 48BE-               <1>  mov rsi, %%arg1
   183 00000357 [C301000000000000]  <1>
   183 0000035F B800000000          <1>  mov rax, 0
   183 00000364 E8(00000000)        <1>  call fprintf
   184                                      PrintInt [num], [stdout]
   184                              <1>  section .data
   184 000001E1 256400              <1>  %%arg1 db "%d",0
   184                              <1>  section .text
   184 00000369 488B3C25[00000000]  <1>  mov rdi, %2
   184 00000371 48BE-               <1>  mov rsi, %%arg1
   184 00000373 [E101000000000000]  <1>
   184 0000037B 488B1425[04000000]  <1>  mov rdx, %1
   184 00000383 B800000000          <1>  mov rax, 0
   184 00000388 E8(00000000)        <1>  call fprintf
   185                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   185                              <1>  section .data
   185 000001E4 2E205365742030203C- <1>  %%arg1 db %1,10,0
   185 000001ED 206E756D626572203C- <1>
   185 000001F6 3D2031303030300A00  <1>
   185                              <1>  section .text
   185 0000038D 488B3C25[00000000]  <1>  mov rdi, %2
   185 00000395 48BE-               <1>  mov rsi, %%arg1
   185 00000397 [E401000000000000]  <1>
   185 0000039F B800000000          <1>  mov rax, 0
   185 000003A4 E8(00000000)        <1>  call fprintf
   186                                      
   187                                  .return:
   188 000003A9 C9                          leave
   189 000003AA C3                          ret
